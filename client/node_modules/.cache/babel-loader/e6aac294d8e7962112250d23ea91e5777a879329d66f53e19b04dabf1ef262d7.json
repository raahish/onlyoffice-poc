{"ast":null,"code":"var _jsxFileName = \"/Users/raahish/Documents/onlyoffice-poc/client/src/EditorPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { DocumentEditor } from \"@onlyoffice/document-editor-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EditorPage() {\n  _s();\n  const {\n    projectId\n  } = useParams();\n  const navigate = useNavigate();\n  const token = localStorage.getItem('token');\n  const [docConfig, setDocConfig] = useState(null);\n  useEffect(() => {\n    if (!token) {\n      navigate('/');\n      return;\n    }\n\n    // Fetch the ONLYOFFICE config from Flask\n    fetch(`http://localhost:5001/projects/${projectId}/document-config?token=${token}`).then(res => res.json()).then(data => {\n      if (data.status === 'error') {\n        alert(data.message);\n        navigate('/projects');\n      } else {\n        // We have a structure like {status, document, editorConfig}\n        // The official React component expects:\n        // { document: {...}, documentType: 'word', editorConfig: {...} }\n        const newConfig = {\n          document: data.document,\n          documentType: \"word\",\n          // or detect from fileType\n          editorConfig: data.editorConfig\n        };\n        setDocConfig(newConfig);\n      }\n    }).catch(error => {\n      console.error(\"Error fetching doc config:\", error);\n      alert(\"Failed to load document config\");\n    });\n  }, [projectId, token, navigate]);\n  const handleDocumentReady = () => {\n    console.log(\"Document is loaded in ONLYOFFICE editor\");\n  };\n  const handleLoadComponentError = (errorCode, errorDescription) => {\n    console.error(\"Load component error:\", errorCode, errorDescription);\n    alert(`Component load error: ${errorDescription}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Editor Page: \", projectId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        height: '80vh'\n      },\n      children: docConfig ? /*#__PURE__*/_jsxDEV(DocumentEditor, {\n        id: \"docxEditor\",\n        documentServerUrl: \"http://localhost\"\n        // If your doc server runs on port 80, just \"http://localhost\"\n        // If it runs on a different port, e.g. 8080, use: \"http://localhost:8080\"\n        ,\n        config: docConfig,\n        events_onDocumentReady: handleDocumentReady,\n        onLoadComponentError: handleLoadComponentError,\n        width: \"100%\",\n        height: \"100%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading document...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(EditorPage, \"sNak+0Y6KUcj1MD3QElEOOiiCKI=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = EditorPage;\nvar _c;\n$RefreshReg$(_c, \"EditorPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","DocumentEditor","jsxDEV","_jsxDEV","EditorPage","_s","projectId","navigate","token","localStorage","getItem","docConfig","setDocConfig","fetch","then","res","json","data","status","alert","message","newConfig","document","documentType","editorConfig","catch","error","console","handleDocumentReady","log","handleLoadComponentError","errorCode","errorDescription","style","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","id","documentServerUrl","config","events_onDocumentReady","onLoadComponentError","_c","$RefreshReg$"],"sources":["/Users/raahish/Documents/onlyoffice-poc/client/src/EditorPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { DocumentEditor } from \"@onlyoffice/document-editor-react\";\n\nexport default function EditorPage() {\n  const { projectId } = useParams();\n  const navigate = useNavigate();\n  const token = localStorage.getItem('token');\n\n  const [docConfig, setDocConfig] = useState(null);\n\n  useEffect(() => {\n    if (!token) {\n      navigate('/');\n      return;\n    }\n\n    // Fetch the ONLYOFFICE config from Flask\n    fetch(`http://localhost:5001/projects/${projectId}/document-config?token=${token}`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.status === 'error') {\n          alert(data.message);\n          navigate('/projects');\n        } else {\n          // We have a structure like {status, document, editorConfig}\n          // The official React component expects:\n          // { document: {...}, documentType: 'word', editorConfig: {...} }\n          const newConfig = {\n            document: data.document,\n            documentType: \"word\",      // or detect from fileType\n            editorConfig: data.editorConfig,\n          };\n          setDocConfig(newConfig);\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error fetching doc config:\", error);\n        alert(\"Failed to load document config\");\n      });\n  }, [projectId, token, navigate]);\n\n  const handleDocumentReady = () => {\n    console.log(\"Document is loaded in ONLYOFFICE editor\");\n  };\n\n  const handleLoadComponentError = (errorCode, errorDescription) => {\n    console.error(\"Load component error:\", errorCode, errorDescription);\n    alert(`Component load error: ${errorDescription}`);\n  };\n\n  return (\n    <div style={{ margin: '20px' }}>\n      <h2>Editor Page: {projectId}</h2>\n      <div style={{ width: '100%', height: '80vh' }}>\n        {docConfig ? (\n          <DocumentEditor\n            id=\"docxEditor\"\n            documentServerUrl=\"http://localhost\" \n            // If your doc server runs on port 80, just \"http://localhost\"\n            // If it runs on a different port, e.g. 8080, use: \"http://localhost:8080\"\n            config={docConfig}\n            events_onDocumentReady={handleDocumentReady}\n            onLoadComponentError={handleLoadComponentError}\n            width=\"100%\"\n            height=\"100%\"\n          />\n        ) : (\n          <p>Loading document...</p>\n        )}\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}